type InterviewSlots @model @auth(rules: [{allow: public, operations: [update, create, read]}, {allow: owner}]) {
  id: ID!
  Time: String
  Date: AWSDate
  Name: String
  Notes: String
  JobOffered: String
  ApplicationID: String
  Drivers: Drivers @hasOne
  ZoomLink: String
  Telephone: String
  Email: String
}

type ResturantInvoice @model @auth(rules: [{allow: public}]) {
  id: ID!
  MondayDrivers: AWSJSON
  TuesdayDrivers: AWSJSON
  WednesdayDrivers: AWSJSON
  ThursdayDrivers: AWSJSON
  FridayDrivers: AWSJSON
  SaturdayDrivers: AWSJSON
  SundayDrivers: AWSJSON
  Week: Int
  TotalBasic: Float
  TotalDelivery: Int
  TotalPromo: Int
  TotalSoftware: Float
  FullCost: String
  Paid: String
  ResturantID: String
}

type DriverHours @model @auth(rules: [{allow: public}]) {
  id: ID!
  DriverID: String
  Date: AWSDate
  Week: Int
  MondayBlock: Int
  TuesdayBlock: Int
  WednesdayBlock: Int
  ThursdayBlock: Int
  FridayBlock: Int
  SaturdayBlock: Int
  SundayBlock: Int
  BasicWageTotal: Float
  Hours: Float
  Deliverys: Int
  Promo: Int
  ExtraTotal: Float
  MondayResturant: AWSJSON
  TuesdayResturant: AWSJSON
  WednesdayResturant: AWSJSON
  ThursdayResturant: String
  FridayResturant: String
  SaturdayResturant: String
  SundayResturant: String
  Drivers: [Drivers] @manyToMany(relationName: "DriverHoursDrivers")
  Resturants: [TakeAway] @manyToMany(relationName: "DriverHoursTakeAway")
  MondayClockIns: AWSJSON
  TuesdayClockins: AWSJSON
  WedesdayClockins: AWSJSON
  ThursdayClockins: AWSJSON
  FridayClockins: AWSJSON
  SaturdayClockins: AWSJSON
  SundayClockins: AWSJSON
}

type TakeAway @model @auth(rules: [{allow: groups, groups: ["Drivers"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Admin"], operations: [read, update, create, delete]}, {allow: owner}]) {
  id: ID!
  Name: String
  Address: String
  Postcode: String
  Menu: AWSJSON
  Contract: String
  Deliverys: String
  CurrentDrivers: Int
  ContractStart: AWSDate
  PaymentHistory: AWSJSON
  PaymentType: String
  Telephone: String
  Email: String
  Reviews: String
  StarRating: Int
  ContractFinish: AWSDate
  Website: String
  CurrentOutstanding: Float
  SortCode: String
  AccountNumber: String
  DriverID: String
  driverhourss: [DriverHours] @manyToMany(relationName: "DriverHoursTakeAway")
  driverss: [Drivers] @manyToMany(relationName: "DriversTakeAway")
  orderss: [Orders] @manyToMany(relationName: "OrdersTakeAway")
  Genre: String
  SalesNotes: String
  VisitTime: String
  CurrentTech: String
  VisitDate: String
  Prospect: Boolean
  Sold: Boolean
  City: String
  County: String
  Area: String
  KitchenMenus: [KitchenMenu] @manyToMany(relationName: "TakeAwayKitchenMenu")
  Marketing: String
  PromoBudget: String
}

type Drivers @model @auth(rules: [{allow: owner}, {allow: public}, {allow: private}]) {
  id: ID!
  Name: String
  Address: String
  PostCode: String
  SortCode: String
  AccountNumber: String
  CarReg: String
  MOTDate: AWSDate
  StartDate: AWSDate
  BasicWage: Float
  StarRating: String
  InsuranceDetails: AWSJSON
  InterviewNotes: String
  Nationality: String
  YearsDriving: String
  Deliverys: Int
  ContractFinish: String
  InternalReviews: String
  ContractType: String
  Area: String
  driverhourss: [DriverHours] @manyToMany(relationName: "DriverHoursDrivers")
  Resturants: [TakeAway] @manyToMany(relationName: "DriversTakeAway")
  orderss: [Orders] @manyToMany(relationName: "OrdersDrivers")
  NationalInsurance: String
  Telephone: String
  LicenceNumber: String
  PassedInterview: Boolean
  DriverReviews: AWSJSON
  DOB: String
  InterviewAccepted: Boolean
  HRnotes: String
  Current: Boolean
  County: String
  Country: String
}

type Messages @model @auth(rules: [{allow: public}, {allow: private}, {allow: owner}]) {
  id: ID!
  content: String
  createdAt: AWSTime
  email: String
  group: [String]
  orderID: String
  Orders: [Orders] @manyToMany(relationName: "MessagesOrders")
  ResturantID: String
}

type Orders @model @auth(rules: [{allow: public}, {allow: private}, {allow: owner}]) {
  id: ID!
  CreatedTime: AWSTime
  CreatedDate: AWSDate
  Collection: Boolean
  Name: String
  Address: String
  Postcode: String
  Telephone: String
  Email: String
  Distance: Float
  SecurityID: String
  Total: Float
  DrinkItems: [String]
  HotItems: [String]
  Cooked: Boolean
  JobAccepted: Boolean
  Arrived: Boolean
  Delivered: Boolean
  TimeDelivered: AWSTime
  JobAcceptedTime: AWSTime
  Notes: String
  HotOrderPrep: String
  TotalNoVAT: Float
  KitchenMenuId: [String]
  ChefName: String
  Driver: String
  DeliveryCharge: Float
  kitchenmenus: [KitchenMenu] @manyToMany(relationName: "KitchenMenuOrders")
  messagess: [Messages] @manyToMany(relationName: "MessagesOrders")
  JourneyTime: String
  FullDeliveryTime: AWSTime
  BackAtBranch: Boolean
  Complete: Boolean
  Lat: [Float]
  Long: [Float]
  CustLat: Float
  CustLong: Float
  Paid: Boolean
  ResturantID: String
  DriverID: String
  Resturants: [TakeAway] @manyToMany(relationName: "OrdersTakeAway")
  Drivers: [Drivers] @manyToMany(relationName: "OrdersDrivers")
  StarRating: Int
}

type Staff @model @auth(rules: [{allow: public}, {allow: private}, {allow: owner}]) {
  id: ID!
  Name: String
  Email: String
  TimeEntries: String
  Role: String
  HourlyRate: Float
  StartDate: AWSDate
  Current: Boolean
  Telephone: String
  ContractType: String
  CarReg: String
  EndDate: AWSDate
  Age: String
  DOB: String
  timeentrys: [TimeEntry] @manyToMany(relationName: "TimeEntryStaff")
}

type TimeEntry @model @auth(rules: [{allow: public}, {allow: owner}, {allow: private}]) {
  id: ID!
  StaffID: String
  Hours: Float
  Dates: [AWSDate]
  ShiftStart: [String]
  ShiftFinish: [String]
  Month: String
  StaffName: String
  Holiday: [AWSDate]
  Staff: [Staff] @manyToMany(relationName: "TimeEntryStaff")
}

type KitchenMenu @model @auth(rules: [{allow: public}, {allow: private}, {allow: owner}]) {
  id: ID!
  Name: String
  Price: Float
  Description: String
  Notes: String
  Kitchen: Boolean
  imageSrc: String
  Prep: AWSTime
  Ingredients: AWSJSON
  Snooze: Boolean
  Extras: AWSJSON
  Category: String
  ProfitMargin: Float
  PriceNoVAT: Float
  InStock: Boolean
  StockLevel: Int
  stockcontrols: [StockControl] @manyToMany(relationName: "StockControlKitchenMenu")
  Orders: [Orders] @manyToMany(relationName: "KitchenMenuOrders")
  ResturantID: String
  resturantss: [TakeAway] @manyToMany(relationName: "TakeAwayKitchenMenu")
}

type HomePage @model @auth(rules: [{allow: public}, {allow: owner}, {allow: private}]) {
  id: ID!
  TopSectionTitle: String
  TopSectionPic: String
  TopSectionDescription: String
}

type Holiday @model @auth(rules: [{allow: public}, {allow: private}, {allow: owner}]) {
  id: ID!
  Name: String
  StartDate: String
  Description: String
  EndDate: String
  Approved: Boolean
  clockins: [ClockIn] @manyToMany(relationName: "ClockInHoliday")
}

type ClockIn @model @auth(rules: [{allow: public}, {allow: private}, {allow: owner}]) {
  id: ID!
  ClockIn: AWSTime
  ClockOut: AWSTime
  Sick: Boolean
  Holiday: String
  StaffId: String
  TimeEntryId: String
  Date: AWSDate
  ClockedIn: Boolean
  ClockedOut: Boolean
  StaffName: String
  StaffRole: String
  Break: Boolean
  BreakStart: AWSTime
  BreakEnd: AWSTime
  Holidays: [Holiday] @manyToMany(relationName: "ClockInHoliday")
  DriverID: String
}

type StockControl @model @auth(rules: [{allow: public}, {allow: private}, {allow: owner}]) {
  id: ID!
  Name: String
  Weight: Int
  Quantity: Int
  Price: Float
  PreVAT: Float
  Supplier: String
  VAT: Float
  CurrentStockLevel: Int
  Cases: Int
  ProductId: String
  NewPrice: Float
  NewVAT: Float
  UsedBy: String
  KitchenMenus: [KitchenMenu] @manyToMany(relationName: "StockControlKitchenMenu")
  MatchCode: String
} 